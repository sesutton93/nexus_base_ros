#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
import sys, select, os, time
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

MAX_LIN_VEL = 100.00
MAX_ANG_VEL = 100.00


LIN_VEL_STEP_SIZE = 5.
ANG_VEL_STEP_SIZE = 5.

msg = """
Control Your Nexus 3WD!
---------------------------
Moving around:
        w
   a         d
        s

Rotate:
   q         e

w/x : increase/decrease linear x velocity 
a/d : increase/decrease linear y velocity
q/e : increase/decrease angular velocity
space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while(1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel_x ,target_linear_vel_y,  target_angular_vel):
    return "currently:\tlinear vel x %s\t linear vel y %s\t angular vel %s " % (target_linear_vel_x, target_linear_vel_y, target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -MAX_LIN_VEL, MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -MAX_ANG_VEL, MAX_ANG_VEL)
    return vel


#if __name__=="__main__":
#    if os.name != 'nt':
#       settings = termios.tcgetattr(sys.stdin)

#    rospy.init_node('nexus_teleop_key')
#    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

#    status = 0
#    prev_status = -1
#    target_linear_vel_x = 0.0
#    target_linear_vel_y = 0.0
#    target_angular_vel  = 0.0
#    try:
#        print(msg)
#	time.sleep(10)
#        while not rospy.is_shutdown():
#            key = getKey()
#            if key == 'w':
#                target_linear_vel_y = 5.0
#	        target_angular_vel = 0.0
#                status = status + 1
#                #print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
#            elif key == 'e':
#                target_angular_vel = 5.0
#	        target_linear_vel_y = 0.0
#                status = status + 1
#                #print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
#            elif key == ' ':
#                target_linear_vel_x = 0.0
#                target_linear_vel_y = 0.0
#                target_linear_vel_z = 0.0
#	        target_angular_vel = 0.0
#            else:
#                if (key == '\x03'):
#                    break

#            if status == 20:
#                print(msg)
#                status = 0
#                prev_status = -1

#            if status != prev_status:
#                twist = Twist()

#                #control_linear_vel_x = makeSimpleProfile(control_linear_vel_x, target_linear_vel_x, (LIN_VEL_STEP_SIZE/2.0))
#                #control_linear_vel_y = makeSimpleProfile(control_linear_vel_y, target_linear_vel_y, (LIN_VEL_STEP_SIZE/2.0))
#                #twist.linear.x = control_linear_vel_x;
#                #twist.linear.y = control_linear_vel_y; 
#	            #twist.linear.z = 0.0

#                #control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
#                #twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

#                twist.linear.x = target_linear_vel_x
#                twist.linear.y = target_linear_vel_y
#                twist.linear.z = 0.0
#                twist.angular.x = 0.0
#                twist.angular.y = 0.0
#                twist.angular.z = target_angular_vel
#                pub.publish(twist)
#            prev_status = status
#    except:
#        print(e)

#    finally:
#        twist = Twist()
#        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
#        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
#        pub.publish(twist)

#    if os.name != 'nt':
#        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('nexus_teleop_key')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    status = 0
    prev_status = -1
    target_linear_vel_x = 0.0
    target_linear_vel_y = 0.0
    target_angular_vel  = 0.0
    #control_linear_vel_x= 0.0
    #control_linear_vel_y= 0.0
    #control_angular_vel = 0.0
    twist = Twist()
    twist.linear.y = 0.0
    twist.linear.x = 0.0
    twist.linear.z = 0.0
    twist.angular.z = 0.0

    pub.publish(twist)

    time.sleep(3)

    #try:
    #    print(msg)
    #     while not rospy.is_shutdown():
    #         key = getKey()
    #         if key == 'a' :
    #             target_linear_vel_x = checkLinearLimitVelocity(target_linear_vel_x + LIN_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == 'd' :
    #             target_linear_vel_x = checkLinearLimitVelocity(target_linear_vel_x - LIN_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == 'w' :
    #             target_linear_vel_y = checkLinearLimitVelocity(target_linear_vel_y + LIN_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == 's' :
    #             target_linear_vel_y = checkLinearLimitVelocity(target_linear_vel_y - LIN_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == 'q' :
    #             target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == 'e' :
    #             target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y, target_angular_vel))
    #         elif key == ' ':
    #             target_linear_vel_x = 0.0
    #             target_linear_vel_y = 0.0
    #             #control_linear_vel_x  = 0.0
    #             #control_linear_vel_y  = 0.0
    #             target_angular_vel = 0.0
    #             #control_angular_vel = 0.0
    #             status = status + 1
    #             print(vels(target_linear_vel_x, target_linear_vel_y ,target_angular_vel))
    #         else:
    #             if (key == '\x03'):
    #                 break

    #         if status == 20 :
    #             print(msg)
    #             status = 0
    #             prev_status = -1

    #         if status != prev_status:
    #             twist = Twist()

    #             #control_linear_vel_x = makeSimpleProfile(control_linear_vel_x, target_linear_vel_x, (LIN_VEL_STEP_SIZE/2.0))
    #             #control_linear_vel_y = makeSimpleProfile(control_linear_vel_y, target_linear_vel_y, (LIN_VEL_STEP_SIZE/2.0))
    #             #twist.linear.x = control_linear_vel_x;
    #             #twist.linear.y = control_linear_vel_y; 
	#             #twist.linear.z = 0.0

    #             #control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
    #             #twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel
                
    #             twist.linear.x = target_linear_vel_x
    #             twist.linear.y = target_linear_vel_y
    #             twist.linear.z = 0.0
    #             twist.angular.x = 0.0
    #             twist.angular.y = 0.0
    #             twist.angular.z = target_angular_vel
    #             pub.publish(twist)
    #         prev_status = status
    # except:
    #     print(e)

    # finally:
    #     twist = Twist()
    #     twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
    #     twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
    #     pub.publish(twist)
    
    
    print("Square starting")
    x = 0
    while x <= 2:

        twist = Twist()
        twist.linear.y = 6.0
        twist.linear.x = 0.0
        twist.linear.z = 0.0
    
        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = 0.0
        pub.publish(twist)
    
        time.sleep(3)
    
        twist.linear.y = 0.0
    
        twist.angular.z = 2.25
        pub.publish(twist)
        time.sleep(3)
    
        twist.linear.y = 4.0
        twist.angular.z = 0.0
        pub.publish(twist)
        time.sleep(2)
    
        twist.linear.y = 0.0
        pub.publish(twist)

	time.sleep(3)
        x += 1

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)


